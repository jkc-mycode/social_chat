<!-- 사용자 목록과 실시간 채팅을 위한 메인 페이지 -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users-Chat</title>
    <link rel="stylesheet" href="/styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <!-- 상단 네비게이션 메뉴 -->
    <div class="header">
        <a href="/chat"><button>Chat</button></a>
        <a href="/chat/users"><button>Users</button></a>
        <a href="#"><button onclick="logout()">Logout</button></a>
    </div>
    <!-- 사용자 목록 표시 영역 -->
    <div class="user-list-box">
        <h3 id="user-list-count">현재: 0명</h3>
        <div id="user-boxes">
            <!-- 사용자 박스들이 여기에 추가 -->
        </div>
    </div>

    <script>
        // 로그아웃 처리 함수
        function logout() {
            fetch('/user/sign-out', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(res => {
                if (res.ok) {
                    window.location.href = '/user/sign-in';
                } else {
                    alert('로그아웃 실패!');
                }
            }).catch(err => {
                console.error('Error:', err);
                alert('로그아웃 실패!');
            });
        }

        // DOM 로드 완료 시 실행
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io('/chat');
            let currentUserId; // 현재 로그인한 사용자의 ID 변수

            socket.on('connect', () => {
                console.log('Chat 네임스페이스 접속 완료');
                // 서버에 현재 사용자 정보 요청
                socket.emit('getCurrentUser');
            });

            socket.on('disconnect', () => {
                console.log('Chat 네임스페이스 접속 해제');
            });

            // 서버로부터 현재 사용자 정보 수신
            socket.on('currentUser', (user) => {
                currentUserId = user.id;
                // 전체 사용자 목록 요청
                socket.emit('requestUserList');
            });

            /**
             * 사용자 목록 업데이트 이벤트 핸들러
             * - 서버로부터 받은 사용자 목록을 화면에 표시
             * - 현재 사용자를 제외한 다른 사용자만 표시
             * - 각 사용자마다 DM(개인 메시지) 버튼 추가
             */
            socket.on('updateUserList', (users) => {
                const userBoxesContainer = document.getElementById('user-boxes');
                const userCount = document.getElementById('user-list-count');

                userBoxesContainer.innerHTML = '';

                // 현재 사용자를 제외한 사용자 목록 필터링
                const filteredUsers = users.filter(user => user.id !== currentUserId);

                // 사용자 수 업데이트 (자신을 제외한 수)
                userCount.innerHTML = `현재: ${filteredUsers.length}명`;

                // 각 사용자별 정보 박스 생성 및 표시
                filteredUsers.forEach(user => {
                    const userBox = document.createElement('div');
                    userBox.className = 'user-box';
                    userBox.innerHTML = `
                        <div class="user-name">ID: ${user.name}</div>
                        <div class="user-join-date">가입일: ${new Date(user.createdAt).toLocaleDateString()}</div>
                        <button class="chat-button">DM</button>
                    `;

                    // DM 버튼 클릭 시 개인 채팅방으로 이동
                    const chatButton = userBox.querySelector('.chat-button');
                    chatButton.addEventListener('click', () => {
                        socket.emit('requestUserList');
                        window.location.href = `/chat/private/${user.id}`;
                    });

                    userBoxesContainer.appendChild(userBox);
                });
            });
        });
    </script>
</body>

</html>