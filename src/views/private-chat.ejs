<!-- 1:1 개인 채팅을 위한 채팅방 페이지 -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Private Chat with <%= targetUser.name %>
    </title>
    <link rel="stylesheet" href="/styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <!-- 상단 네비게이션 메뉴 -->
    <div class="header">
        <a href="/chat"><button>Chat</button></a>
        <a href="/chat/users"><button>Users</button></a>
        <a href="#"><button onclick="logout()">Logout</button></a>
    </div>
    <!-- 1:1 채팅 컨텐츠 영역 -->
    <div class="chat-content">
        <h2 class="chat-title">
            <%= targetUser.name %>님과의 대화
        </h2>
        <div class="chat-container">
            <div class="message-and-input">
                <div class="messages" id="messages">
                    <!-- 메시지들 출력될 곳 -->
                </div>
                <div class="message-input">
                    <input type="text" id="message" placeholder="메시지를 입력해 주세요.">
                    <button id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 대화 상대방의 사용자 ID를 서버에서 전달받아 저장
        const targetUserId = '<%= targetUser.id %>';

        // 로그아웃 처리 함수
        function logout() {
            fetch('/user/sign-out', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(res => {
                if (res.ok) {
                    window.location.href = '/user/sign-in';
                } else {
                    alert('로그아웃 실패!');
                }
            }).catch(err => {
                console.error('Error:', err);
                alert('로그아웃 실패!');
            });
        }

        // DOM 로드 완료 시 실행
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io('/chat');

            /**
             * 소켓 연결 성공 시 실행되는 이벤트 핸들러
             * - private 채팅방 참여 알림
             * - 이전 1:1 대화 내용 요청
             */
            socket.on('connect', () => {
                console.log('Chat 네임스페이스 접속 완료');
                socket.emit('joinPage', 'private');
                // 이전 1:1 대화 내용 요청
                socket.emit('requestMessages', { type: 'private', targetId: +targetUserId });
            });

            socket.on('disconnect', () => {
                console.log('Chat 네임스페이스 접속 해제');
            });

            /**
             * 기존 채팅 메시지 표시 이벤트 핸들러
             * - 채팅방 입장 시 이전 메시지들을 화면에 표시
             */
            socket.on('existingMessages', (messages) => {
                const messagesContainer = document.getElementById('messages');
                messages.forEach(message => {
                    const messageElement = document.createElement('div');
                    messageElement.textContent = `${message.User.name}: ${message.message}`;
                    messagesContainer.appendChild(messageElement);
                });
            });

            /**
             * 새 메시지 수신 이벤트 핸들러
             * - 다른 사용자가 보낸 새 메시지를 실시간으로 화면에 표시
             */
            socket.on('newMessage', (data) => {
                const messages = document.getElementById('messages');
                const messageElement = document.createElement('div');
                messageElement.textContent = `${data.user.name}: ${data.newMessage.message}`;
                messages.appendChild(messageElement);
            });

            /**
             * 메시지 전송 버튼 클릭 이벤트 핸들러
             * - 입력된 메시지를 서버로 전송
             * - 빈 메시지는 전송하지 않음
             */
            const sendButton = document.getElementById('sendButton');
            sendButton.addEventListener('click', () => {
                const messageInput = document.getElementById('message');
                const message = messageInput.value;
                if (message.trim()) {
                    socket.emit('sendMessage', {
                        message,
                        type: 'private',
                        targetId: +targetUserId
                    });
                    messageInput.value = '';
                }
            });

            // Enter 키로도 메시지 전송
            const messageInput = document.getElementById('message');
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && messageInput.value.trim()) {
                    socket.emit('sendMessage', {
                        message: messageInput.value,
                        type: 'private',
                        targetId: +targetUserId
                    });
                    messageInput.value = '';
                }
            });
        });
    </script>
</body>

</html>