<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Private Chat with <%= targetUser.name %>
    </title>
    <link rel="stylesheet" href="/styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <div class="header">
        <a href="/chat"><button>Chat</button></a>
        <a href="/chat/users"><button>Users</button></a>
        <a href="#"><button onclick="logout()">Logout</button></a>
    </div>
    <div class="chat-content">
        <h2 class="chat-title">
            <%= targetUser.name %>님과의 대화
        </h2>
        <div class="chat-container">
            <div class="message-and-input">
                <div class="messages" id="messages">
                    <!-- 메시지들 출력될 곳 -->
                </div>
                <div class="message-input">
                    <input type="text" id="message" placeholder="메시지를 입력해 주세요.">
                    <button id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const targetUserId = '<%= targetUser.id %>';

        // 로그아웃 버튼 클릭 시
        function logout() {
            fetch('/user/sign-out', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(res => {
                if (res.ok) {
                    window.location.href = '/user/sign-in';
                } else {
                    alert('로그아웃 실패!');
                }
            }).catch(err => {
                console.error('Error:', err);
                alert('로그아웃 실패!');
            });
        }

        // 페이지 로딩 시
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io('/chat');

            socket.on('connect', () => {
                console.log('Chat 네임스페이스 접속 완료');
                console.log(targetUserId);
                socket.emit('joinPage', 'private');
                // private 메시지 목록 요청
                socket.emit('requestMessages', { type: 'private', targetId: +targetUserId });
            });

            socket.on('disconnect', () => {
                console.log('Chat 네임스페이스 접속 해제');
            });

            socket.on('existingMessages', (messages) => {
                console.log(messages);
                const messagesContainer = document.getElementById('messages');
                messages.forEach(message => {
                    const messageElement = document.createElement('div');
                    messageElement.textContent = `${message.User.name}: ${message.message}`;
                    messagesContainer.appendChild(messageElement);
                });
                // 스크롤을 최하단으로 이동
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            });

            socket.on('newMessage', (data) => {
                const messages = document.getElementById('messages');
                const messageElement = document.createElement('div');
                messageElement.textContent = `${data.user.name}: ${data.newMessage.message}`;
                messages.appendChild(messageElement);
                // 새 메시지가 오면 스크롤을 최하단으로 이동
                messages.scrollTop = messages.scrollHeight;
            });

            const sendButton = document.getElementById('sendButton');
            sendButton.addEventListener('click', () => {
                const messageInput = document.getElementById('message');
                const message = messageInput.value;
                if (message.trim()) {
                    socket.emit('sendMessage', {
                        message,
                        type: 'private',
                        targetId: +targetUserId
                    });
                    messageInput.value = '';
                }
            });

            // Enter 키로도 메시지 전송
            const messageInput = document.getElementById('message');
            messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && messageInput.value.trim()) {
                    socket.emit('sendMessage', {
                        message: messageInput.value,
                        type: 'private',
                        targetId: +targetUserId
                    });
                    messageInput.value = '';
                }
            });
        });
    </script>
</body>

</html>